library(data.table)
library(dataRetrieval)
library(dplyr)
library(tidyr)
library(readr)
library(zoo)
library(broom)
library(mgcv)
library(purrr)
library(ggplot2)

rm(list = ls())
dev.off()

setwd("D:/School/USGSdata")

dat_final_flow <- read_csv('DailyMean_Discharge_1996-2019.csv', col_types = list(
  agency_cd = col_character(),
  site_no = col_character(),
  Date = col_date(),
  Flow = col_double(),
  Flow_cd = col_character(),
  flow_cms = col_double()))
dat_final_flow <- data.frame(dat_final_flow)
dat_final_flow$year <- year(dat_final_flow$Date)
dat_final_flow$month <- month(dat_final_flow$Date)
dat_final_flow$DateFormatted <- as.Date(dat_final_flow$Date, tz = "", "%Y-%m-%d")
dat_final_flow$DoY <- strftime(dat_final_flow$DateFormatted, format = "%j")
dat_final_flow$DoY <- as.numeric(dat_final_flow$DoY)
dat_final_flow$flow_cms[dat_final_flow$flow_cms < 0] <- NA
dat_final_flow <- dat_final_flow[!dat_final_flow$DoY == 366,]

df <- dat_final_flow %>%
  group_by(site_no, DoY) %>%
  mutate(DoY_median_flow_cms = median(flow_cms)) %>%
  ungroup

df <- df %>%
  group_by(site_no) %>%
  mutate(flow_14d_rollmean = rollmean(DoY_median_flow_cms, 14, fill = NA, align = "center")) %>%
  ungroup

mod_func <-function(df){
  gam(DoY_median_flow_cms ~ s(DoY, bs = 'cc'), data = df)
}

get_pred <- function(mod){
  predict(mod, newdata =  data.frame(DoY = 1:365), type = "response")
}

df2 <- df %>% 
  {. ->> df_output} %>% 
  group_by(site_no) %>% 
  nest() %>% 
  mutate(mod = map(data, mod_func),
         pred = map(mod, get_pred)) %>% 
  unnest(pred) %>% 
  mutate(DoY = 1:365) %>% 
  dplyr::select(-data, -mod) %>%
  left_join(.,df_output, by = c("site_no","DoY"))

sorted <- df2 %>% arrange(site_no, DateFormatted)
sorted <- data.frame(sorted)
final_Qdat <- sorted[,c(5,1,3,6:14,2)]
names(final_Qdat)[names(final_Qdat) == "pred"] <- "flow_gam_pred"
final_Qdat$flow_gam_pred <- as.numeric(final_Qdat$flow_gam_pred)
final_Qdat$ResidualQ <- final_Qdat$flow_cms - final_Qdat$flow_gam_pred
final_Qdat$ResidualQ_percent <- (final_Qdat$ResidualQ/final_Qdat$flow_gam_pred)*100
# write.csv(final_Qdat, 'Residual_Discharge_USGS.csv')

rm(list=setdiff(ls(), c("df", "df2", "final_Qdat")))

df3 <- df %>%
  group_by(site_no) %>%
  do(gam_mod = gam(DoY_median_flow_cms ~ s(DoY, bs = 'cc'), data = .)) %>%
  ungroup

# df3[[2]][[1]][["fitted.values"]]

by_site_no <- group_by(df, site_no)
gam_stats <- do(by_site_no,
                glance(gam(DoY_median_flow_cms ~ s(DoY, bs = 'cc'), data = .)))
gam_stats$r.sq <- sapply(df3$gam_mod, function(x) r_sq = summary(x)$r.sq)

example_site <- final_Qdat[final_Qdat$site_no == "01388000",]

ggplot() +
  geom_line(data = example_site, aes(x = DoY, y = DoY_median_flow_cms), color = "red", size = 1) +
  labs(y = "Discharge (cms)",
       x = "Day of Year") +
  annotate(geom = "text", x = 210, y = 14.5,
           label = "Median Q", color = "black",
           hjust = 0, size = 5) +
  geom_line(aes(x= 180:205, y = 14.45), size = 1, color = "red") +
  scale_y_continuous(breaks = c(seq(from = 0, to = 14, by = 2))) +
  scale_x_continuous(breaks = c(seq(from = 0, to = 365, by = 30))) +
  theme_bw() +
  theme(panel.grid = element_blank(),
        text = element_text(size = 14),
        axis.text = element_text(size = 12, color = "black"),
        axis.text.x = element_text(size = 12, color = "black"),
        axis.text.y = element_text(size = 12, color = "black"))

ggplot() +
  geom_line(data = example_site, aes(x = DoY, y = DoY_median_flow_cms), color = "red", size = 1) +
  geom_line(data = example_site, aes(x = DoY, y = flow_14d_rollmean), color = "black", size = 1) +
  labs(y = "Discharge (cms)",
       x = "Day of Year") +
  annotate(geom = "text", x = 180, y = 14.5,
           label = "Median Q", color = "black",
           hjust = 0, size = 4) +
  geom_line(aes(x= 150:170, y = 14.45), size = 1, color = "red") +
  annotate(geom = "text", x = 180, y = 13.5,
           label = "Rolling 14-day Mean of Median Q", color = "black",
           hjust = 0, size = 4) +
  geom_line(aes(x= 150:170, y = 13.45), size = 1, color = "black") +
  scale_y_continuous(breaks = c(seq(from = 0, to = 14, by = 2))) +
  scale_x_continuous(breaks = c(seq(from = 0, to = 365, by = 30))) +
  theme_bw() +
  theme(panel.grid = element_blank(),
        text = element_text(size = 14),
        axis.text = element_text(size = 12, color = "black"),
        axis.text.x = element_text(size = 12, color = "black"),
        axis.text.y = element_text(size = 12, color = "black"))

ggplot() +
  geom_line(data = example_site, aes(x = DoY, y = DoY_median_flow_cms), color = "red", size = 1) +
  geom_line(data = example_site, aes(x = DoY, y = flow_14d_rollmean), color = "black", size = 1) +
  geom_line(data = example_site, aes(x = DoY, y = flow_gam_pred), color = "blue", size = 1) +
  labs(y = "Discharge (cms)",
       x = "Day of Year") +
  annotate(geom = "text", x = 180, y = 6.5,
           label = "Median Q", color = "black",
           hjust = 0, size = 4) +
  geom_line(aes(x= 150:170, y = 6.45), size = 1, color = "red") +
  annotate(geom = "text", x = 180, y = 5.5,
           label = "Rolling 14-day Mean of Median Q", color = "black",
           hjust = 0, size = 4) +
  geom_line(aes(x= 150:170, y = 5.45), size = 1, color = "black") +
  annotate(geom = "text", x = 180, y = 4.5,
           label = "GAM predicted Q", color = "black",
           hjust = 0, size = 4) +
  geom_line(aes(x= 150:170, y = 4.45), size = 1, color = "blue") +
  scale_y_continuous(breaks = c(seq(from = 0, to = 6, by = 1))) +
  scale_x_continuous(breaks = c(seq(from = 0, to = 365, by = 30))) +
  theme_bw() +
  theme(panel.grid = element_blank(),
        text = element_text(size = 14),
        axis.text = element_text(size = 12, color = "black"),
        axis.text.x = element_text(size = 12, color = "black"),
        axis.text.y = element_text(size = 12, color = "black"))

ggplot() +
  geom_point(data = example_site, aes(x = DoY, y = flow_cms), color = "light gray") +
  geom_line(data = example_site, aes(x = DoY, y = DoY_median_flow_cms), color = "red", size = 1) +
  geom_line(data = example_site, aes(x = DoY, y = flow_14d_rollmean), color = "black", size = 1) +
  geom_line(data = example_site, aes(x = DoY, y = flow_gam_pred), color = "blue", size = 1) +
  labs(y = "Discharge (cms)",
       x = "Day of Year") +
  annotate(geom = "text", x = 180, y = 14.5,
           label = "Median Q", color = "black",
           hjust = 0, size = 4) +
  geom_line(aes(x= 150:170, y = 14.45), size = 1, color = "red") +
  annotate(geom = "text", x = 180, y = 13.5,
           label = "Rolling 14-day Mean of Median Q", color = "black",
           hjust = 0, size = 4) +
  geom_line(aes(x= 150:170, y = 13.45), size = 1, color = "black") +
  annotate(geom = "text", x = 180, y = 12.5,
           label = "GAM predicted Q", color = "black",
           hjust = 0, size = 4) +
  geom_line(aes(x= 150:170, y = 12.45), size = 1, color = "blue") +
  scale_y_continuous(breaks = c(seq(from = 0, to = 500, by = 50))) +
  scale_x_continuous(breaks = c(seq(from = 0, to = 365, by = 30))) +
  theme_bw() +
  theme(panel.grid = element_blank(),
        text = element_text(size = 14),
        axis.text = element_text(size = 12, color = "black"),
        axis.text.x = element_text(size = 12, color = "black"),
        axis.text.y = element_text(size = 12, color = "black"))

ggplot(data = example_site, aes(x = Date, y = ResidualQ_percent)) +
  geom_line(color = "black") +
  labs(y = "Residual Q (%)") +
  ylim(-100,1000) +
  geom_hline(yintercept = 0, color = 'red') +
  theme_bw() +
  theme(panel.grid = element_blank(),
        text = element_text(size = 14),
        axis.text = element_text(size = 12, color = "black"),
        axis.text.x = element_text(size = 12, color = "black"),
        axis.text.y = element_text(size = 12, color = "black"))

hw <- read_csv('USGS_HW_Output_1996-2019.csv', col_types = list(
  STUSAB = col_character(),
  Region = col_character(),
  site_no = col_character(),
  Reservoir = col_character(),
  DrainageArea_km2 = col_number(),
  StreamOrder = col_number(),
  event_no = col_integer(),
  index_start = col_integer(),
  index_peak = col_integer(),
  index_end = col_integer(),
  duration = col_number(),
  date_start = col_date(),
  date_peak = col_date(),
  date_end = col_date(),
  intensity_mean = col_number(),
  intensity_max = col_number(),
  intensity_var = col_number(),
  intensity_cumulative = col_number(),
  intensity_mean_relThresh = col_number(),
  intensity_max_relThresh = col_number(),
  intensity_var_relThresh = col_number(),
  intensity_cumulative_relThresh = col_number(),
  intensity_mean_abs = col_number(),
  intensity_max_abs = col_number(),
  intensity_var_abs = col_number(),
  intensity_cumulative_abs = col_number(),
  rate_onset = col_number(),
  rate_decline = col_number(),
  Year = col_integer(),
  Month = col_integer(),
  Season = col_character()))

ranges <- mapply(function(x, y, z)  seq.Date(y, z, 1), hw$site_no,  hw$date_start, hw$date_end, USE.NAMES = TRUE)

hw$meanResidQ <- mapply(function(a, b)
  mean(final_Qdat$ResidualQ_percent[final_Qdat$site_no == b][match(a, final_Qdat$DateFormatted[final_Qdat$site_no == b])]), ranges, names(ranges))

hw_below0 <- hw[hw$meanResidQ < 0,]
hw_above0 <- hw[hw$meanResidQ > 0,]

NROW(hw$meanResidQ)
NROW(na.omit(hw$meanResidQ))
NROW(na.omit(hw_above0$meanResidQ))
NROW(na.omit(hw_below0$meanResidQ))

hw %>%
  group_by(Season) %>%
  summarise(median(meanResidQ, na.rm = TRUE))

hw %>%
  group_by(Region) %>%
  summarise(median(meanResidQ, na.rm = TRUE))

hw %>%
  group_by(StreamOrder) %>%
  summarise(median(meanResidQ, na.rm = TRUE))
